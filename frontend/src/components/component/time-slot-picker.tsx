/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/I9AWgemgKO3
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState } from "react";

import { Button } from "@/components/ui/button";

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/I9AWgemgKO3
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/I9AWgemgKO3
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/

export function TimeSlotPicker() {
  const [timeSlots, setTimeSlots] = useState([
    { start: "09:00", end: "10:00" },
    { start: "14:00", end: "15:00" },
    { start: "18:00", end: "19:00" },
  ]);
  const [newSlot, setNewSlot] = useState({ start: "", end: "" });
  const addTimeSlot = () => {
    if (newSlot.start && newSlot.end) {
      setTimeSlots([...timeSlots, newSlot]);
      setNewSlot({ start: "", end: "" });
    }
  };
  const removeTimeSlot = (index: number) => {
    const updatedSlots = [...timeSlots];
    updatedSlots.splice(index, 1);
    setTimeSlots(updatedSlots);
  };
  const updateTimeSlot = (index, field, value) => {
    const updatedSlots = [...timeSlots];
    updatedSlots[index][field] = value;
    setTimeSlots(updatedSlots);
  };
  return (
    <div className="bg-background rounded-lg border p-6 w-full max-w-md flex flex-col gap-4">
      <div className="flex flex-row items-center justify-between">
        <div className="flex flex-row items-center">
          <div className="bg-muted rounded-full w-8 h-8 flex items-center justify-center">
            <ClockIcon className="w-5 h-5 text-muted-foreground" />
          </div>
          <h2 className="text-lg font-bold text-center">Time Slot Picker</h2>
        </div>
        <div className="bg-muted rounded-full w-8 h-8 flex items-center justify-center">
          <PlusIcon className="w-5 h-5 text-muted-foreground" />
        </div>
      </div>
      <div className="grid gap-2">
        {timeSlots.map((slot, index) => (
          <div
            key={index}
            className="bg-muted rounded-lg p-4 flex items-center justify-between"
          >
            <div className="flex items-center gap-2">
              <input
                type="time"
                value={slot.start}
                onChange={(e) => updateTimeSlot(index, "start", e.target.value)}
                className="bg-transparent border-none focus:ring-0 text-base font-medium px-2 py-1 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
              />
              <span className="text-muted-foreground">to</span>
              <input
                type="time"
                value={slot.end}
                onChange={(e) => updateTimeSlot(index, "end", e.target.value)}
                className="bg-transparent border-none focus:ring-0 text-base font-medium px-2 py-1 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
              />
            </div>
            <Button
              variant="ghost"
              size="icon"
              onClick={() => removeTimeSlot(index)}
            >
              <XIcon className="w-5 h-5 text-muted-foreground" />
            </Button>
          </div>
        ))}
        <div className="bg-muted rounded-lg p-4 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <input
              type="time"
              value={newSlot.start}
              onChange={(e) =>
                setNewSlot({ ...newSlot, start: e.target.value })
              }
              className="bg-transparent border-none focus:ring-0 text-base font-medium px-2 py-1 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
            />
            <span className="text-muted-foreground">to</span>
            <input
              type="time"
              value={newSlot.end}
              onChange={(e) => setNewSlot({ ...newSlot, end: e.target.value })}
              className="bg-transparent border-none focus:ring-0 text-base font-medium px-2 py-1 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
            />
          </div>
          <Button variant="ghost" size="icon" onClick={addTimeSlot}>
            <PlusIcon className="w-5 h-5 text-muted-foreground" />
          </Button>
        </div>
      </div>
      {/* <div className="bg-muted rounded-lg p-4 flex flex-col gap-2">
        <div className="flex items-center justify-between">
          <span className="font-semibold">Selected Time Slots</span>
          <span className="text-muted-foreground">{timeSlots.length}</span>
        </div>
        <div className="grid gap-2">
          {timeSlots.map((slot, index) => (
            <div key={index} className="bg-background rounded-lg p-2 flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-base font-medium">{slot.start}</span>
                <span className="text-muted-foreground">to</span>
                <span className="text-base font-medium">{slot.end}</span>
              </div>
              <Button variant="ghost" size="icon" onClick={() => removeTimeSlot(index)}>
                <XIcon className="w-5 h-5 text-muted-foreground" />
              </Button>
            </div>
          ))}
        </div>
      </div> */}
    </div>
  );
}

function ClockIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <polyline points="12 6 12 12 16 14" />
    </svg>
  );
}

function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  );
}

function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  );
}
